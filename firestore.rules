rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn() && request.auth.uid == userId
        && request.resource.data.keys().hasAll(['email', 'createdAt'])
        && isValidEmail(request.resource.data.email);
      allow update: if isOwner(userId) 
        && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'createdAt']));
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // User preferences
    match /users/{userId}/preferences/{document=**} {
      allow read, write: if isOwner(userId);
    }
    
    // Orders - users can read their own, admins can read all
    match /orders/{orderId} {
      allow read: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isSignedIn() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'items', 'total', 'status', 'createdAt']);
      allow update: if isAdmin() || 
        (isOwner(resource.data.userId) && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']));
      allow delete: if isAdmin();
    }
    
    // Products - public read, admin write
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Reviews - authenticated users can create, owners can update/delete
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isSignedIn() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'productId', 'rating', 'comment']);
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Inventory - public read, admin write
    match /inventory/{itemId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Analytics - admin only
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Wishlist - users manage their own
    match /wishlists/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Cart sessions - temporary storage
    match /carts/{sessionId} {
      allow read, write: if true;
      // Note: In production, implement session-based security
    }
  }
}
